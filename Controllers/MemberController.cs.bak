using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using wsKooshDaroo.Models;
using wsKooshDaroo.Data;

namespace wsKooshDaroo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MemberController : ControllerBase
    {
        private readonly KooshDarooContext _context;

        public MemberController(KooshDarooContext context)
        {
            _context = context;
        }

        // GET: api/Member
        [HttpGet]
        public IEnumerable<Member> GetMember()
        {
            return _context.Member;
        }

        // GET: api/Member/5
        [HttpGet("{id}")]
        public async Task<IActionResult> GetMember([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var Member = await _context.Member.FindAsync(id);

            if (Member == null)
            {
                return NotFound();
            }

            return Ok(Member);
        }

        // GET: api/Member/PhoneNo/09125555555
        [HttpGet("PhoneNo/{phoneno}")]
        //public IQueryable<Member> GetMemberByPhoneNo(string phoneno)
        public async Task<IActionResult> GetMemberByPhoneNo([FromRoute] string phoneno)
        {
            var members = _context.Member.Where(f => f.PhoneNo == phoneno);
            if (members.Count() == 0)
                return NotFound();

            return Ok(members.FirstOrDefault());
        }

        // PUT: api/Member/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutMember([FromRoute] int id, [FromBody] Member Member)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != Member.id)
            {
                return BadRequest();
            }

            _context.Entry(Member).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MemberExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Member
        [HttpPost]
        public async Task<IActionResult> PostMember([FromBody] Member Member)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            _context.Member.Add(Member);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetMember", new { id = Member.id }, Member);
        }

        // DELETE: api/Member/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteMember([FromRoute] int id)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var Member = await _context.Member.FindAsync(id);
            if (Member == null)
            {
                return NotFound();
            }

            _context.Member.Remove(Member);
            await _context.SaveChangesAsync();

            return Ok(Member);
        }

        private bool MemberExists(int id)
        {
            return _context.Member.Any(e => e.id == id);
        }
    }
}